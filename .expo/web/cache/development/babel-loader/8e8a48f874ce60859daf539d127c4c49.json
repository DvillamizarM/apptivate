{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dani1\\\\Desktop\\\\apptivate\\\\src\\\\components\\\\Simple\\\\infoButton.tsx\";\nimport * as React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { connect } from \"react-redux\";\nimport { actionsUser } from \"../../redux/actions/actionsUser\";\nimport Icon from \"@expo/vector-icons/FontAwesome\";\n\nfunction infoButton(props) {\n  var layout = useWindowDimensions();\n  return React.createElement(View, {\n    style: {\n      height: 50,\n      width: 50,\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: {\n      height: \"80%\",\n      width: \"80%\",\n      backgroundColor: \"rgba(225, 126, 62,1)\",\n      borderRadius: 5,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      marginLeft: \"5%\",\n      marginRight: \"15%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, React.createElement(Icon, {\n    name: \"info-circle\",\n    style: {\n      textAlign: \"center\"\n    },\n    onPress: function onPress() {\n      switch (props.repoIndex) {\n        case 0:\n          props.updateShowTour1(true);\n          break;\n\n        case 1:\n          props.updateShowTour2(true);\n          break;\n\n        case 2:\n          props.updateShowTour3(true);\n          break;\n\n        default:\n          break;\n      }\n    },\n    color: \"#ffffff\",\n    size: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  })));\n}\n\nvar MapStateToProps = function MapStateToProps(store) {\n  console.log(\"store--\", store.User.user);\n  return {\n    repoIndex: store.User.repoIndex\n  };\n};\n\nvar MapDispatchToProps = function MapDispatchToProps(dispatch, store) {\n  return {\n    updateShowTour1: function updateShowTour1(val) {\n      return dispatch(actionsUser.SHOW_TOUR1(val));\n    },\n    updateShowTour2: function updateShowTour2(val) {\n      return dispatch(actionsUser.SHOW_TOUR2(val));\n    },\n    updateShowTour3: function updateShowTour3(val) {\n      return dispatch(actionsUser.SHOW_TOUR3(val));\n    },\n    updateShowTour4: function updateShowTour4(val) {\n      return dispatch(actionsUser.SHOW_TOUR4(val));\n    },\n    updateShowTour5: function updateShowTour5(val) {\n      return dispatch(actionsUser.SHOW_TOUR5(val));\n    }\n  };\n};\n\nexport default connect(MapStateToProps, MapDispatchToProps)(infoButton);","map":{"version":3,"sources":["C:/Users/dani1/Desktop/apptivate/src/components/Simple/infoButton.tsx"],"names":["React","connect","actionsUser","Icon","infoButton","props","layout","useWindowDimensions","height","width","justifyContent","alignItems","backgroundColor","borderRadius","marginLeft","marginRight","textAlign","repoIndex","updateShowTour1","updateShowTour2","updateShowTour3","MapStateToProps","store","console","log","User","user","MapDispatchToProps","dispatch","val","SHOW_TOUR1","SHOW_TOUR2","SHOW_TOUR3","updateShowTour4","SHOW_TOUR4","updateShowTour5","SHOW_TOUR5"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n  View,\r\n  useWindowDimensions,\r\n  Text,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport * as MyTypes from \"../../redux/types/types\";\r\nimport { actionsUser } from \"../../redux/actions/actionsUser\";\r\nimport Icon from \"react-native-vector-icons/FontAwesome\";\r\n\r\nfunction infoButton(props) {\r\n  const layout = useWindowDimensions();\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        height: 50,\r\n        width: 50,\r\n        justifyContent: \"center\",\r\n        alignItems:\"center\",\r\n      }}\r\n    >\r\n      {/* <TouchableOpacity\r\n        onPress={() => props.updateShowTour(true)}\r\n        style={{\r\n          backgroundColor: \"rgba(225, 126, 62,1)\",\r\n          height: 100,\r\n          width: 100,\r\n          borderRadius: 20,\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      > */}\r\n      <TouchableOpacity\r\n        style={{\r\n          height: \"80%\",\r\n          width: \"80%\",\r\n          backgroundColor: \"rgba(225, 126, 62,1)\",\r\n          borderRadius: 5,\r\n          justifyContent: \"center\",\r\n          alignItems:\"center\",\r\n          marginLeft: \"5%\",\r\n          marginRight: \"15%\",\r\n        }}\r\n      >\r\n        <Icon\r\n          name={\"info-circle\"}\r\n          style={{ textAlign: \"center\" }}\r\n          onPress={() => {\r\n            switch (props.repoIndex) {\r\n              case 0:\r\n                props.updateShowTour1(true);\r\n                break;\r\n              case 1:\r\n                props.updateShowTour2(true);\r\n                break;\r\n              case 2:\r\n                props.updateShowTour3(true);\r\n                break;\r\n\r\n              default:\r\n                break;\r\n            }\r\n          }}\r\n          color={\"#ffffff\"}\r\n          // backgroundColor={'rgba(255, 231, 35,1.3)'}\r\n          // borderRadius={13}\r\n          size={24}\r\n          //  style={{ height: \"100%\", width: \"130%\", marginLeft: \"10%\" }}\r\n          // style={{paddingLeft:\"20%\"}}\r\n          // style={{marginLeft:\"5%\",height: \"100%\", width: \"100%\",textAlign: \"center\", textAlignVertical: \"center\", backgroundColor: \"rgba(225, 126, 62,1)\",}}\r\n        />\r\n      </TouchableOpacity>\r\n\r\n      {/* </TouchableOpacity> */}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst MapStateToProps = (store: MyTypes.ReducerState) => {\r\n  console.log(\"store--\", store.User.user);\r\n  return {\r\n    repoIndex: store.User.repoIndex,\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps = (dispatch: Dispatch, store: any) => ({\r\n  updateShowTour1: (val) => dispatch(actionsUser.SHOW_TOUR1(val)),\r\n  updateShowTour2: (val) => dispatch(actionsUser.SHOW_TOUR2(val)),\r\n  updateShowTour3: (val) => dispatch(actionsUser.SHOW_TOUR3(val)),\r\n  updateShowTour4: (val) => dispatch(actionsUser.SHOW_TOUR4(val)),\r\n  updateShowTour5: (val) => dispatch(actionsUser.SHOW_TOUR5(val)),\r\n});\r\nexport default connect(MapStateToProps, MapDispatchToProps)(infoButton);\r\n"]},"metadata":{},"sourceType":"module"}