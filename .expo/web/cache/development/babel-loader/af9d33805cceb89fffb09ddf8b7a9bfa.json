{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\dani1\\\\Desktop\\\\apptivate\\\\src\\\\components\\\\screens\\\\ProfileScreen.tsx\";\n\nimport * as React from \"react\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { TabView, SceneMap, TabBar } from \"react-native-tab-view\";\nimport { connect } from \"react-redux\";\nimport { actionsUser } from \"../../redux/actions/actionsUser\";\nimport ScalableText from \"react-native-text\";\nimport GeneralProfileScreen from \"../cards/GeneralProfileScreen\";\n\nvar FirstRoute = function FirstRoute(props) {\n  return React.createElement(GeneralProfileScreen, {\n    props: props,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 31\n    }\n  });\n};\n\nvar _require = require(\"react-native-expo-viewport-units\"),\n    vmin = _require.vmin;\n\nfunction TabViewExample(props) {\n  var _this2 = this;\n\n  var layout = useWindowDimensions();\n  var name = props.user.information.personal.name;\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      index = _React$useState2[0],\n      setIndex = _React$useState2[1];\n\n  var _React$useState3 = React.useState([{\n    key: \"first\",\n    title: \"General\",\n    color: \"red\"\n  }]),\n      _React$useState4 = _slicedToArray(_React$useState3, 1),\n      routes = _React$useState4[0];\n\n  var renderScene = SceneMap({\n    first: function first() {\n      return FirstRoute(props);\n    }\n  });\n  return React.createElement(TabView, {\n    navigationState: {\n      index: index,\n      routes: routes\n    },\n    swipeEnabled: false,\n    renderScene: renderScene,\n    onIndexChange: setIndex,\n    initialLayout: {\n      width: layout.width\n    },\n    renderTabBar: function renderTabBar(props) {\n      return React.createElement(TabBar, _extends({}, props, {\n        renderLabel: function renderLabel(_ref) {\n          var route = _ref.route,\n              color = _ref.color;\n          return React.createElement(ScalableText, {\n            style: {\n              color: \"#6979F8\",\n              margin: 4,\n              fontSize: vmin(4.5),\n              textAlign: \"center\"\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 13\n            }\n          }, name);\n        },\n        indicatorStyle: {\n          backgroundColor: \"#6979F8\"\n        },\n        style: {\n          backgroundColor: \"white\"\n        },\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  });\n}\n\nvar MapStateToProps = function MapStateToProps(store) {\n  console.log(\"store--\", store.User.user);\n  return {\n    user: store.User.user\n  };\n};\n\nvar MapDispatchToProps = function MapDispatchToProps(dispatch, store) {\n  return {\n    setUser: function setUser(val) {\n      return dispatch(actionsUser.SET_USER(val));\n    }\n  };\n};\n\nexport default connect(MapStateToProps, MapDispatchToProps)(TabViewExample);","map":{"version":3,"sources":["C:/Users/dani1/Desktop/apptivate/src/components/screens/ProfileScreen.tsx"],"names":["React","TabView","SceneMap","TabBar","connect","actionsUser","ScalableText","GeneralProfileScreen","FirstRoute","props","require","vmin","TabViewExample","layout","useWindowDimensions","name","user","information","personal","useState","index","setIndex","key","title","color","routes","renderScene","first","width","route","margin","fontSize","textAlign","backgroundColor","MapStateToProps","store","console","log","User","MapDispatchToProps","dispatch","setUser","val","SET_USER"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport { View, useWindowDimensions, Text } from \"react-native\";\r\nimport { TabView, SceneMap, TabBar } from \"react-native-tab-view\";\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport * as MyTypes from \"../../redux/types/types\";\r\nimport { actionsUser } from \"../../redux/actions/actionsUser\";\r\nimport ScalableText from \"react-native-text\"\r\n\r\nimport GeneralProfileScreen from \"../cards/GeneralProfileScreen\";\r\nimport ExerciseProfileScreen from \"../cards/ExerciseProfileScreen\";\r\n\r\nconst FirstRoute = (props) => <GeneralProfileScreen props={props} />;\r\nvar { vmin } = require(\"react-native-expo-viewport-units\");\r\n\r\n//const SecondRoute = (props) => <ExerciseProfileScreen props={props} />;\r\n\r\nfunction TabViewExample(props) {\r\n  const layout = useWindowDimensions();\r\nconst name = props.user.information.personal.name;\r\n  const [index, setIndex] = React.useState(0);\r\n  const [routes] = React.useState([\r\n    { key: \"first\", title: \"General\", color: \"red\" },\r\n   // { key: \"second\", title: \"Programar rutinas\" },\r\n  ]);\r\n\r\n  const renderScene = SceneMap({\r\n    first: () => FirstRoute(props),\r\n   // second: () => SecondRoute(props),\r\n  });\r\n\r\n  return (\r\n    <TabView\r\n      navigationState={{ index, routes }}\r\n      swipeEnabled={false}\r\n      renderScene={renderScene}\r\n      onIndexChange={setIndex}\r\n      initialLayout={{ width: layout.width }}\r\n      //   style={{ backgroundColor: \"red\" }}\r\n      renderTabBar={(props) => (\r\n        <TabBar\r\n          {...props}\r\n          renderLabel={({ route, color }) => (\r\n            <ScalableText style={{ color: \"#6979F8\", margin: 4, fontSize: vmin(4.5), textAlign: \"center\" }}>\r\n              {name}\r\n            </ScalableText>\r\n          )}\r\n          indicatorStyle={{ backgroundColor: \"#6979F8\" }}\r\n          style={{\r\n            backgroundColor: \"white\",\r\n            // alignItems: \"center\",\r\n            // justifyContent: \"center\",\r\n          }}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n\r\n\r\nconst MapStateToProps = (store: MyTypes.ReducerState) => {\r\n  console.log(\"store--\", store.User.user)\r\n  return {\r\n    user: store.User.user,\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps = (dispatch: Dispatch, store: any) => ({\r\n  setUser: (val) => dispatch(actionsUser.SET_USER(val)),\r\n});\r\nexport default connect(MapStateToProps, MapDispatchToProps)(TabViewExample);\r\n"]},"metadata":{},"sourceType":"module"}