{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\dani1\\\\Desktop\\\\apptivate\\\\node_modules\\\\react-native-range-slider-expo\\\\src\\\\RangeSlider.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler, State } from 'react-native-gesture-handler';\nimport Svg, { Path } from 'react-native-svg';\nvar SMALL_SIZE = 24;\nvar MEDIUM_SIZE = 34;\nvar LARGE_SIZE = 44;\nvar osRtl = I18nManager.isRTL;\nexport default (function (_ref) {\n  var min = _ref.min,\n      max = _ref.max,\n      fromValueOnChange = _ref.fromValueOnChange,\n      toValueOnChange = _ref.toValueOnChange,\n      _ref$step = _ref.step,\n      step = _ref$step === void 0 ? 1 : _ref$step,\n      _ref$styleSize = _ref.styleSize,\n      styleSize = _ref$styleSize === void 0 ? 'medium' : _ref$styleSize,\n      _ref$fromKnobColor = _ref.fromKnobColor,\n      fromKnobColor = _ref$fromKnobColor === void 0 ? '#00a2ff' : _ref$fromKnobColor,\n      _ref$toKnobColor = _ref.toKnobColor,\n      toKnobColor = _ref$toKnobColor === void 0 ? '#00a2ff' : _ref$toKnobColor,\n      _ref$inRangeBarColor = _ref.inRangeBarColor,\n      inRangeBarColor = _ref$inRangeBarColor === void 0 ? 'rgb(100,100,100)' : _ref$inRangeBarColor,\n      _ref$outOfRangeBarCol = _ref.outOfRangeBarColor,\n      outOfRangeBarColor = _ref$outOfRangeBarCol === void 0 ? 'rgb(200,200,200)' : _ref$outOfRangeBarCol,\n      _ref$valueLabelsTextC = _ref.valueLabelsTextColor,\n      valueLabelsTextColor = _ref$valueLabelsTextC === void 0 ? 'white' : _ref$valueLabelsTextC,\n      _ref$valueLabelsBackg = _ref.valueLabelsBackgroundColor,\n      valueLabelsBackgroundColor = _ref$valueLabelsBackg === void 0 ? '#3a4766' : _ref$valueLabelsBackg,\n      _ref$rangeLabelsTextC = _ref.rangeLabelsTextColor,\n      rangeLabelsTextColor = _ref$rangeLabelsTextC === void 0 ? 'rgb(60,60,60)' : _ref$rangeLabelsTextC,\n      _ref$showRangeLabels = _ref.showRangeLabels,\n      showRangeLabels = _ref$showRangeLabels === void 0 ? true : _ref$showRangeLabels,\n      _ref$showValueLabels = _ref.showValueLabels,\n      showValueLabels = _ref$showValueLabels === void 0 ? true : _ref$showValueLabels,\n      initialFromValue = _ref.initialFromValue,\n      initialToValue = _ref.initialToValue;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      wasInitialized = _useState2[0],\n      setWasInitialized = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      knobSize = _useState4[0],\n      setknobSize = _useState4[1];\n\n  var _useState5 = useState(15),\n      _useState6 = _slicedToArray(_useState5, 2),\n      fontSize = _useState6[0],\n      setFontSize = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      stepInPixels = _useState8[0],\n      setStepInPixels = _useState8[1];\n\n  var _useState9 = useState('row'),\n      _useState10 = _slicedToArray(_useState9, 2),\n      flexDirection = _useState10[0],\n      setFlexDirection = _useState10[1];\n\n  var _useState11 = useState({\n    left: (knobSize - 40) / 2\n  }),\n      _useState12 = _slicedToArray(_useState11, 2),\n      svgOffset = _useState12[0],\n      setSvgOffset = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      fromValueOffset = _useState14[0],\n      setFromValueOffset = _useState14[1];\n\n  var _useState15 = useState(0),\n      _useState16 = _slicedToArray(_useState15, 2),\n      toValueOffset = _useState16[0],\n      setToValueOffset = _useState16[1];\n\n  var _useState17 = useState(0),\n      _useState18 = _slicedToArray(_useState17, 2),\n      sliderWidth = _useState18[0],\n      setSliderWidth = _useState18[1];\n\n  var _useState19 = useState(3),\n      _useState20 = _slicedToArray(_useState19, 2),\n      fromElevation = _useState20[0],\n      setFromElevation = _useState20[1];\n\n  var _useState21 = useState(3),\n      _useState22 = _slicedToArray(_useState21, 2),\n      toElevation = _useState22[0],\n      setToElevation = _useState22[1];\n\n  var _useState23 = useState(new Animated.Value(0)),\n      _useState24 = _slicedToArray(_useState23, 1),\n      translateXfromValue = _useState24[0];\n\n  var _useState25 = useState(new Animated.Value(0)),\n      _useState26 = _slicedToArray(_useState25, 1),\n      translateXtoValue = _useState26[0];\n\n  var _useState27 = useState(new Animated.Value(0.01)),\n      _useState28 = _slicedToArray(_useState27, 1),\n      fromValueScale = _useState28[0];\n\n  var _useState29 = useState(new Animated.Value(0.01)),\n      _useState30 = _slicedToArray(_useState29, 1),\n      toValueScale = _useState30[0];\n\n  var _useState31 = useState(new Animated.Value(0.01)),\n      _useState32 = _slicedToArray(_useState31, 1),\n      rightBarScaleX = _useState32[0];\n\n  var _useState33 = useState(new Animated.Value(0.01)),\n      _useState34 = _slicedToArray(_useState33, 1),\n      leftBarScaleX = _useState34[0];\n\n  var toValueTextRef = React.createRef();\n  var fromValueTextRef = React.createRef();\n  var opacity = React.useRef(new Animated.Value(0)).current;\n  useEffect(function () {\n    setFlexDirection(osRtl ? 'row-reverse' : 'row');\n    setSvgOffset(osRtl ? {\n      right: (knobSize - 40) / 2\n    } : {\n      left: (knobSize - 40) / 2\n    });\n  }, [knobSize]);\n  useEffect(function () {\n    if (wasInitialized) {\n      var _fromValueTextRef$cur, _toValueTextRef$curre;\n\n      var stepSize = setStepSize(max, min, step);\n      (_fromValueTextRef$cur = fromValueTextRef.current) == null ? void 0 : _fromValueTextRef$cur.setNativeProps({\n        text: min.toString()\n      });\n      (_toValueTextRef$curre = toValueTextRef.current) == null ? void 0 : _toValueTextRef$curre.setNativeProps({\n        text: max.toString()\n      });\n\n      if (typeof initialFromValue === 'number' && initialFromValue >= min && initialFromValue <= max) {\n        var offset = (initialFromValue - min) / step * stepSize - knobSize / 2;\n        setFromValueStatic(offset, knobSize, stepSize);\n        setValueText(offset + knobSize, true);\n      }\n\n      if (typeof initialToValue === 'number' && initialToValue >= min && initialToValue <= max && typeof initialFromValue === 'number' && initialToValue > initialFromValue) {\n        var _offset = (initialToValue - min) / step * stepSize - knobSize / 2;\n\n        setToValueStatic(_offset, knobSize, stepSize);\n        setValueText(_offset, false);\n      }\n\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: 64,\n        useNativeDriver: true\n      }).start();\n    }\n  }, [min, max, step, initialFromValue, initialToValue, wasInitialized]);\n  useEffect(function () {\n    var size = typeof styleSize === 'number' ? styleSize : styleSize === 'small' ? SMALL_SIZE : styleSize === 'medium' ? MEDIUM_SIZE : LARGE_SIZE;\n    setknobSize(size);\n    translateXfromValue.setValue(-size / 4);\n  }, [styleSize]);\n\n  var setFromValueStatic = function setFromValueStatic(newOffset, knobSize, stepInPixels) {\n    newOffset = Math.floor((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n    setFromValue(newOffset);\n    setFromValueOffset(newOffset);\n    fromValueOnChange(Math.floor((newOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min);\n  };\n\n  var setFromValue = function setFromValue(newOffset) {\n    translateXfromValue.setValue(newOffset);\n    leftBarScaleX.setValue((newOffset + knobSize / 2) / sliderWidth + 0.01);\n  };\n\n  var setToValueStatic = function setToValueStatic(newOffset, knobSize, stepInPixels) {\n    newOffset = Math.ceil((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n    setToValue(newOffset);\n    setToValueOffset(newOffset);\n    toValueOnChange(Math.ceil((newOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min);\n  };\n\n  var setToValue = function setToValue(newOffset) {\n    translateXtoValue.setValue(newOffset);\n    rightBarScaleX.setValue(1.01 - (newOffset + knobSize / 2) / sliderWidth);\n  };\n\n  var setStepSize = function setStepSize(max, min, step) {\n    var numberOfSteps = (max - min) / step;\n    var stepSize = sliderWidth / numberOfSteps;\n    setStepInPixels(stepSize);\n    return stepSize;\n  };\n\n  var setValueText = function setValueText(totalOffset) {\n    var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (from && fromValueTextRef != null) {\n      var _fromValueTextRef$cur2;\n\n      var numericValue = Math.floor((totalOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min;\n      (_fromValueTextRef$cur2 = fromValueTextRef.current) == null ? void 0 : _fromValueTextRef$cur2.setNativeProps({\n        text: numericValue.toString()\n      });\n    } else if (from === false && toValueTextRef != null) {\n      var _toValueTextRef$curre2;\n\n      var _numericValue = Math.ceil((totalOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min;\n\n      (_toValueTextRef$curre2 = toValueTextRef.current) == null ? void 0 : _toValueTextRef$curre2.setNativeProps({\n        text: _numericValue.toString()\n      });\n    }\n  };\n\n  var onGestureEventFromValue = function onGestureEventFromValue(event) {\n    var totalOffset = event.nativeEvent.translationX + fromValueOffset;\n\n    if (totalOffset >= -knobSize / 2 && totalOffset < toValueOffset) {\n      translateXfromValue.setValue(totalOffset);\n      setValueText(totalOffset, true);\n      leftBarScaleX.setValue((totalOffset + knobSize / 2) / sliderWidth + 0.01);\n    }\n  };\n\n  var onHandlerStateChangeFromValue = function onHandlerStateChangeFromValue(event) {\n    if (event.nativeEvent.state === State.BEGAN) {\n      scaleTo(fromValueScale, 1);\n      setElevations(6, 5);\n    }\n\n    if (event.nativeEvent.state === State.END) {\n      var newOffset = event.nativeEvent.translationX + fromValueOffset;\n      newOffset = Math.floor((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n\n      if (newOffset < -knobSize / 2) {\n        newOffset = -knobSize / 2;\n      } else if (newOffset >= toValueOffset) {\n        newOffset = toValueOffset - stepInPixels;\n      }\n\n      setFromValueStatic(newOffset, knobSize, stepInPixels);\n      scaleTo(fromValueScale, 0.01);\n    }\n  };\n\n  var onGestureEventToValue = function onGestureEventToValue(event) {\n    var totalOffset = event.nativeEvent.translationX + toValueOffset;\n\n    if (totalOffset <= sliderWidth - knobSize / 2 && totalOffset > fromValueOffset) {\n      translateXtoValue.setValue(totalOffset);\n      setValueText(totalOffset, false);\n      rightBarScaleX.setValue(1.01 - (totalOffset + knobSize / 2) / sliderWidth);\n    }\n  };\n\n  var onHandlerStateChangeToValue = function onHandlerStateChangeToValue(event) {\n    if (event.nativeEvent.state === State.BEGAN) {\n      scaleTo(toValueScale, 1);\n      setElevations(5, 6);\n    }\n\n    if (event.nativeEvent.state === State.END) {\n      var newOffset = event.nativeEvent.translationX + toValueOffset;\n      newOffset = Math.ceil((newOffset + knobSize / 2) / stepInPixels) * stepInPixels - knobSize / 2;\n\n      if (newOffset > sliderWidth - knobSize / 2) {\n        newOffset = sliderWidth - knobSize / 2;\n      } else if (newOffset <= fromValueOffset) {\n        newOffset = fromValueOffset + stepInPixels;\n      }\n\n      setToValueOffset(newOffset);\n      translateXtoValue.setValue(newOffset);\n      rightBarScaleX.setValue(1.01 - (newOffset + knobSize / 2) / sliderWidth);\n      scaleTo(toValueScale, 0.01);\n      toValueOnChange(Math.ceil((newOffset + knobSize / 2) * (max - min) / sliderWidth / step) * step + min);\n    }\n  };\n\n  var scaleTo = function scaleTo(param, toValue) {\n    return Animated.timing(param, {\n      toValue: toValue,\n      duration: 150,\n      useNativeDriver: true\n    }).start();\n  };\n\n  var setElevations = function setElevations(fromValue, toValue) {\n    setFromElevation(fromValue);\n    setToElevation(toValue);\n  };\n\n  var onLayout = function onLayout(event) {\n    if (wasInitialized === false) {\n      var width = event.nativeEvent.layout.width;\n      setSliderWidth(width);\n      translateXtoValue.setValue(width - knobSize / 2);\n      setToValueOffset(width - knobSize / 2);\n      setWasInitialized(true);\n    }\n  };\n\n  return React.createElement(Animated.View, {\n    style: [styles.container, {\n      opacity: opacity,\n      padding: styleSize === 'large' ? 7 : styleSize === 'medium' ? 14 : 21\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }\n  }, showValueLabels && React.createElement(View, {\n    style: {\n      width: '100%',\n      height: 1,\n      flexDirection: flexDirection\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }\n  }, React.createElement(Animated.View, {\n    style: {\n      position: 'absolute',\n      bottom: 0,\n      left: 0,\n      transform: [{\n        translateX: translateXfromValue\n      }, {\n        scale: fromValueScale\n      }]\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 21\n    }\n  }, React.createElement(Svg, {\n    width: 40,\n    height: 56,\n    style: [svgOffset, {\n      justifyContent: 'center',\n      alignItems: 'center'\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 25\n    }\n  }, React.createElement(Path, {\n    d: \"M20.368027196163986,55.24077513402203 C20.368027196163986,55.00364778429386 37.12897994729114,42.11537830086061 39.19501224411266,22.754628132990383 C41.26104454093417,3.393877965120147 24.647119286738516,0.571820003300814 20.368027196163986,0.7019902620266703 C16.088935105589453,0.8321519518460209 -0.40167016290734386,3.5393865664909434 0.7742997013327574,21.806127302984205 C1.950269565572857,40.07286803947746 20.368027196163986,55.4779024837502 20.368027196163986,55.24077513402203 z\",\n    strokeWidth: 1,\n    fill: valueLabelsBackgroundColor,\n    stroke: valueLabelsBackgroundColor,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 29\n    }\n  })), React.createElement(TextInput, {\n    editable: false,\n    style: _objectSpread(_objectSpread({\n      position: 'absolute',\n      width: 40,\n      textAlign: 'center'\n    }, svgOffset), {}, {\n      color: valueLabelsTextColor,\n      bottom: 25,\n      fontWeight: 'bold'\n    }),\n    ref: fromValueTextRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 25\n    }\n  })), React.createElement(Animated.View, {\n    style: {\n      position: 'absolute',\n      bottom: 0,\n      left: 0,\n      alignItems: 'center',\n      transform: [{\n        translateX: translateXtoValue\n      }, {\n        scale: toValueScale\n      }]\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 21\n    }\n  }, React.createElement(Svg, {\n    width: 40,\n    height: 56,\n    style: [svgOffset, {\n      justifyContent: 'center',\n      alignItems: 'center'\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 25\n    }\n  }, React.createElement(Path, {\n    d: \"M20.368027196163986,55.24077513402203 C20.368027196163986,55.00364778429386 37.12897994729114,42.11537830086061 39.19501224411266,22.754628132990383 C41.26104454093417,3.393877965120147 24.647119286738516,0.571820003300814 20.368027196163986,0.7019902620266703 C16.088935105589453,0.8321519518460209 -0.40167016290734386,3.5393865664909434 0.7742997013327574,21.806127302984205 C1.950269565572857,40.07286803947746 20.368027196163986,55.4779024837502 20.368027196163986,55.24077513402203 z\",\n    strokeWidth: 1,\n    fill: valueLabelsBackgroundColor,\n    stroke: valueLabelsBackgroundColor,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 29\n    }\n  })), React.createElement(TextInput, {\n    editable: false,\n    style: _objectSpread(_objectSpread({\n      position: 'absolute',\n      width: 40,\n      textAlign: 'center'\n    }, svgOffset), {}, {\n      color: valueLabelsTextColor,\n      bottom: 25,\n      fontWeight: 'bold'\n    }),\n    ref: toValueTextRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 25\n    }\n  }))), React.createElement(View, {\n    style: {\n      width: '100%',\n      height: knobSize,\n      marginVertical: 4,\n      position: 'relative',\n      flexDirection: flexDirection,\n      alignItems: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: {\n      position: 'absolute',\n      backgroundColor: inRangeBarColor,\n      left: knobSize / 4,\n      marginLeft: -knobSize / 4,\n      right: knobSize / 4,\n      height: knobSize / 3\n    },\n    onLayout: onLayout,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 17\n    }\n  }), React.createElement(Animated.View, {\n    style: {\n      position: 'absolute',\n      left: knobSize / 4,\n      marginLeft: -knobSize / 4,\n      right: knobSize / 4,\n      height: knobSize / 3,\n      backgroundColor: outOfRangeBarColor,\n      transform: [{\n        translateX: sliderWidth / 2\n      }, {\n        scaleX: rightBarScaleX\n      }, {\n        translateX: -sliderWidth / 2\n      }]\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 17\n    }\n  }), React.createElement(Animated.View, {\n    style: {\n      position: 'absolute',\n      left: -knobSize / 4,\n      width: knobSize / 2,\n      height: knobSize / 3,\n      borderRadius: knobSize / 3,\n      backgroundColor: outOfRangeBarColor\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 17\n    }\n  }), React.createElement(Animated.View, {\n    style: {\n      width: sliderWidth,\n      height: knobSize / 3,\n      backgroundColor: outOfRangeBarColor,\n      transform: [{\n        translateX: -sliderWidth / 2\n      }, {\n        scaleX: leftBarScaleX\n      }, {\n        translateX: sliderWidth / 2\n      }]\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 17\n    }\n  }), React.createElement(Animated.View, {\n    style: {\n      position: 'absolute',\n      left: sliderWidth - knobSize / 4,\n      width: knobSize / 2,\n      height: knobSize / 3,\n      borderRadius: knobSize / 3,\n      backgroundColor: outOfRangeBarColor\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 17\n    }\n  }), React.createElement(PanGestureHandler, {\n    onGestureEvent: onGestureEventFromValue,\n    onHandlerStateChange: onHandlerStateChangeFromValue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 17\n    }\n  }, React.createElement(Animated.View, {\n    style: [styles.knob, {\n      height: knobSize,\n      width: knobSize,\n      borderRadius: knobSize,\n      backgroundColor: fromKnobColor,\n      elevation: fromElevation,\n      transform: [{\n        translateX: translateXfromValue\n      }]\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 21\n    }\n  })), React.createElement(PanGestureHandler, {\n    onGestureEvent: onGestureEventToValue,\n    onHandlerStateChange: onHandlerStateChangeToValue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 17\n    }\n  }, React.createElement(Animated.View, {\n    style: [styles.knob, {\n      height: knobSize,\n      width: knobSize,\n      borderRadius: knobSize,\n      backgroundColor: toKnobColor,\n      elevation: toElevation,\n      transform: [{\n        translateX: translateXtoValue\n      }]\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 21\n    }\n  }))), showRangeLabels && React.createElement(View, {\n    style: {\n      width: '100%',\n      flexDirection: flexDirection,\n      justifyContent: 'space-between'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: rangeLabelsTextColor,\n      fontWeight: \"bold\",\n      fontSize: fontSize\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 21\n    }\n  }, min), React.createElement(Text, {\n    style: {\n      color: rangeLabelsTextColor,\n      fontWeight: \"bold\",\n      fontSize: fontSize\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 21\n    }\n  }, max)));\n});\nvar styles = StyleSheet.create({\n  container: {\n    height: 100,\n    width: '100%'\n  },\n  knob: {\n    position: 'absolute',\n    elevation: 4\n  }\n});","map":{"version":3,"sources":["C:/Users/dani1/Desktop/apptivate/node_modules/react-native-range-slider-expo/src/RangeSlider.tsx"],"names":["React","useState","useEffect","PanGestureHandler","State","Svg","Path","SMALL_SIZE","MEDIUM_SIZE","LARGE_SIZE","osRtl","I18nManager","isRTL","min","max","fromValueOnChange","toValueOnChange","step","styleSize","fromKnobColor","toKnobColor","inRangeBarColor","outOfRangeBarColor","valueLabelsTextColor","valueLabelsBackgroundColor","rangeLabelsTextColor","showRangeLabels","showValueLabels","initialFromValue","initialToValue","wasInitialized","setWasInitialized","knobSize","setknobSize","fontSize","setFontSize","stepInPixels","setStepInPixels","flexDirection","setFlexDirection","left","svgOffset","setSvgOffset","fromValueOffset","setFromValueOffset","toValueOffset","setToValueOffset","sliderWidth","setSliderWidth","fromElevation","setFromElevation","toElevation","setToElevation","Animated","Value","translateXfromValue","translateXtoValue","fromValueScale","toValueScale","rightBarScaleX","leftBarScaleX","toValueTextRef","createRef","fromValueTextRef","opacity","useRef","current","right","stepSize","setStepSize","setNativeProps","text","toString","offset","setFromValueStatic","setValueText","setToValueStatic","timing","toValue","duration","useNativeDriver","start","size","setValue","newOffset","Math","floor","setFromValue","ceil","setToValue","numberOfSteps","totalOffset","from","numericValue","onGestureEventFromValue","event","nativeEvent","translationX","onHandlerStateChangeFromValue","state","BEGAN","scaleTo","setElevations","END","onGestureEventToValue","onHandlerStateChangeToValue","param","fromValue","onLayout","width","layout","styles","container","padding","height","position","bottom","transform","translateX","scale","justifyContent","alignItems","textAlign","color","fontWeight","marginVertical","backgroundColor","marginLeft","scaleX","borderRadius","knob","elevation","StyleSheet","create"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Animated, StyleSheet, View, LayoutChangeEvent, Text, TextInput, I18nManager } from 'react-native';\r\nimport { PanGestureHandler, PanGestureHandlerGestureEvent, State } from 'react-native-gesture-handler';\r\nimport Svg, { Path } from 'react-native-svg';\r\n\r\nconst SMALL_SIZE = 24;\r\nconst MEDIUM_SIZE = 34;\r\nconst LARGE_SIZE = 44;\r\n\r\nconst osRtl = I18nManager.isRTL;\r\n\r\ninterface SliderProps {\r\n    min: number,\r\n    max: number,\r\n    fromValueOnChange: (value: number) => void,\r\n    toValueOnChange: (value: number) => void,\r\n    step?: number,\r\n    styleSize?: 'small' | 'medium' | 'large' | number,\r\n    fromKnobColor?: string,\r\n    toKnobColor?: string,\r\n    inRangeBarColor?: string,\r\n    outOfRangeBarColor?: string,\r\n    valueLabelsTextColor?: string,\r\n    valueLabelsBackgroundColor?: string,\r\n    rangeLabelsTextColor?: string,\r\n    showRangeLabels?: boolean,\r\n    showValueLabels?: boolean,\r\n    initialFromValue?: number,\r\n    initialToValue?: number\r\n}\r\n\r\nexport default ({\r\n    min, max, fromValueOnChange, toValueOnChange,\r\n    step = 1,\r\n    styleSize = 'medium',\r\n    fromKnobColor = '#00a2ff',\r\n    toKnobColor = '#00a2ff',\r\n    inRangeBarColor = 'rgb(100,100,100)',\r\n    outOfRangeBarColor = 'rgb(200,200,200)',\r\n    valueLabelsTextColor = 'white',\r\n    valueLabelsBackgroundColor = '#3a4766',\r\n    rangeLabelsTextColor = 'rgb(60,60,60)',\r\n    showRangeLabels = true,\r\n    showValueLabels = true,\r\n    initialFromValue,\r\n    initialToValue\r\n}: SliderProps) => {\r\n\r\n    // settings\r\n    const [wasInitialized, setWasInitialized] = useState(false);\r\n    const [knobSize, setknobSize] = useState(0);\r\n    const [fontSize, setFontSize] = useState(15);\r\n    const [stepInPixels, setStepInPixels] = useState(0);\r\n\r\n    // rtl settings\r\n    const [flexDirection, setFlexDirection] = useState<\"row\" | \"row-reverse\" | \"column\" | \"column-reverse\" | undefined>('row');\r\n    const [svgOffset, setSvgOffset] = useState<object>({ left: (knobSize - 40) / 2 });\r\n\r\n    const [fromValueOffset, setFromValueOffset] = useState(0);\r\n    const [toValueOffset, setToValueOffset] = useState(0);\r\n    const [sliderWidth, setSliderWidth] = useState(0);\r\n    const [fromElevation, setFromElevation] = useState(3);\r\n    const [toElevation, setToElevation] = useState(3);\r\n\r\n    // animation values\r\n    const [translateXfromValue] = useState(new Animated.Value(0));\r\n    const [translateXtoValue] = useState(new Animated.Value(0));\r\n    const [fromValueScale] = useState(new Animated.Value(0.01));\r\n    const [toValueScale] = useState(new Animated.Value(0.01));\r\n    const [rightBarScaleX] = useState(new Animated.Value(0.01));\r\n    const [leftBarScaleX] = useState(new Animated.Value(0.01));\r\n\r\n    // refs\r\n    const toValueTextRef = React.createRef<TextInput>();\r\n    const fromValueTextRef = React.createRef<TextInput>();\r\n    const opacity = React.useRef<Animated.Value>(new Animated.Value(0)).current;\r\n\r\n    // initalizing settings\r\n    useEffect(() => {\r\n        setFlexDirection(osRtl ? 'row-reverse' : 'row');\r\n        setSvgOffset(osRtl ? { right: (knobSize - 40) / 2 } : { left: (knobSize - 40) / 2 });\r\n    }, [knobSize]);\r\n    useEffect(() => {\r\n        if (wasInitialized) {\r\n            const stepSize = setStepSize(max, min, step);\r\n            fromValueTextRef.current?.setNativeProps({ text: min.toString() });\r\n            toValueTextRef.current?.setNativeProps({ text: max.toString() });\r\n            if (typeof initialFromValue === 'number' && initialFromValue >= min && initialFromValue <= max) {\r\n                const offset = ((initialFromValue - min) / step) * stepSize - (knobSize / 2);\r\n                setFromValueStatic(offset, knobSize, stepSize);\r\n                setValueText(offset + knobSize, true);\r\n            }\r\n            if (typeof initialToValue === 'number' && initialToValue >= min && initialToValue <= max && typeof initialFromValue === 'number' && initialToValue > initialFromValue) {\r\n                const offset = ((initialToValue - min) / step) * stepSize - (knobSize / 2);\r\n                setToValueStatic(offset, knobSize, stepSize);\r\n                setValueText(offset, false);\r\n            }\r\n            Animated.timing(opacity, {\r\n                toValue: 1,\r\n                duration: 64,\r\n                useNativeDriver: true\r\n            }).start();\r\n        }\r\n    }, [min, max, step, initialFromValue, initialToValue, wasInitialized]);\r\n    useEffect(() => {\r\n        const size = typeof styleSize === 'number' ? styleSize : styleSize === 'small' ? SMALL_SIZE : styleSize === 'medium' ? MEDIUM_SIZE : LARGE_SIZE;\r\n        setknobSize(size);\r\n        translateXfromValue.setValue(-size / 4);\r\n    }, [styleSize]);\r\n\r\n    // initalizing settings helpers\r\n    const setFromValueStatic = (newOffset: number, knobSize: number, stepInPixels: number) => {\r\n        newOffset = Math.floor((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\r\n        setFromValue(newOffset);\r\n        setFromValueOffset(newOffset);\r\n        fromValueOnChange(Math.floor(((newOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min);\r\n    }\r\n    const setFromValue = (newOffset: number) => {\r\n        translateXfromValue.setValue(newOffset);\r\n        leftBarScaleX.setValue((newOffset + (knobSize / 2)) / sliderWidth + 0.01);\r\n    }\r\n    const setToValueStatic = (newOffset: number, knobSize: number, stepInPixels: number) => {\r\n        newOffset = Math.ceil((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\r\n        setToValue(newOffset);\r\n        setToValueOffset(newOffset);\r\n        toValueOnChange(Math.ceil(((newOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min);\r\n    }\r\n    const setToValue = (newOffset: number) => {\r\n        translateXtoValue.setValue(newOffset);\r\n        rightBarScaleX.setValue(1.01 - ((newOffset + (knobSize / 2)) / sliderWidth));\r\n    }\r\n    const setStepSize = (max: number, min: number, step: number) => {\r\n        const numberOfSteps = ((max - min) / step);\r\n        const stepSize = sliderWidth / numberOfSteps;\r\n        setStepInPixels(stepSize);\r\n        return stepSize;\r\n    }\r\n    const setValueText = (totalOffset: number, from = true) => {\r\n        if (from && fromValueTextRef != null) {\r\n            const numericValue: number = Math.floor(((totalOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min;\r\n            fromValueTextRef.current?.setNativeProps({ text: numericValue.toString() });\r\n        }\r\n        else if (from === false && toValueTextRef != null) {\r\n            const numericValue: number = Math.ceil(((totalOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min;\r\n            toValueTextRef.current?.setNativeProps({ text: numericValue.toString() });\r\n        }\r\n    }\r\n\r\n\r\n    // from value gesture events ------------------------------------------------------------------------\r\n    const onGestureEventFromValue = (event: PanGestureHandlerGestureEvent) => {\r\n        let totalOffset = event.nativeEvent.translationX + fromValueOffset;\r\n        if (totalOffset >= -knobSize / 2 && totalOffset < toValueOffset) {\r\n            translateXfromValue.setValue(totalOffset);\r\n            setValueText(totalOffset, true);\r\n            leftBarScaleX.setValue((totalOffset + (knobSize / 2)) / sliderWidth + 0.01);\r\n        }\r\n    }\r\n    const onHandlerStateChangeFromValue = (event: PanGestureHandlerGestureEvent) => {\r\n        if (event.nativeEvent.state === State.BEGAN) {\r\n            scaleTo(fromValueScale, 1);\r\n            setElevations(6, 5);\r\n        }\r\n        if (event.nativeEvent.state === State.END) {\r\n            let newOffset = event.nativeEvent.translationX + fromValueOffset;\r\n            newOffset = Math.floor((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\r\n            if (newOffset < -knobSize / 2) {\r\n                newOffset = -knobSize / 2;\r\n            } else if (newOffset >= toValueOffset) {\r\n                newOffset = toValueOffset - stepInPixels;\r\n            }\r\n            setFromValueStatic(newOffset, knobSize, stepInPixels)\r\n            scaleTo(fromValueScale, 0.01);\r\n        }\r\n    }\r\n    // ------------------------------------------------------------------------------------------------\r\n\r\n    // to value gesture events ------------------------------------------------------------------------\r\n    const onGestureEventToValue = (event: PanGestureHandlerGestureEvent) => {\r\n        const totalOffset = event.nativeEvent.translationX + toValueOffset;\r\n        if (totalOffset <= sliderWidth - knobSize / 2 && totalOffset > fromValueOffset) {\r\n            translateXtoValue.setValue(totalOffset);\r\n            setValueText(totalOffset, false);\r\n            rightBarScaleX.setValue(1.01 - ((totalOffset + (knobSize / 2)) / sliderWidth));\r\n        }\r\n    }\r\n    const onHandlerStateChangeToValue = (event: PanGestureHandlerGestureEvent) => {\r\n        if (event.nativeEvent.state === State.BEGAN) {\r\n            scaleTo(toValueScale, 1);\r\n            setElevations(5, 6);\r\n        }\r\n        if (event.nativeEvent.state === State.END) {\r\n            let newOffset = event.nativeEvent.translationX + toValueOffset;\r\n            newOffset = Math.ceil((newOffset + (knobSize / 2)) / stepInPixels) * stepInPixels - (knobSize / 2);\r\n            if (newOffset > sliderWidth - knobSize / 2) {\r\n                newOffset = sliderWidth - knobSize / 2;\r\n            } else if (newOffset <= fromValueOffset) {\r\n                newOffset = fromValueOffset + stepInPixels;\r\n            }\r\n            setToValueOffset(newOffset);\r\n            translateXtoValue.setValue(newOffset);\r\n            rightBarScaleX.setValue(1.01 - ((newOffset + (knobSize / 2)) / sliderWidth));\r\n            scaleTo(toValueScale, 0.01);\r\n            toValueOnChange(Math.ceil(((newOffset + (knobSize / 2)) * (max - min) / sliderWidth) / step) * step + min);\r\n        }\r\n    }\r\n    // ------------------------------------------------------------------------------------------------\r\n\r\n    // gesture events help functions ------------------------------------------------------------------\r\n    const scaleTo = (param: Animated.Value, toValue: number) => Animated.timing(param,\r\n        {\r\n            toValue,\r\n            duration: 150,\r\n            useNativeDriver: true\r\n        }\r\n    ).start();\r\n\r\n    const setElevations = (fromValue: number, toValue: number) => {\r\n        setFromElevation(fromValue);\r\n        setToElevation(toValue)\r\n    }\r\n    // ------------------------------------------------------------------------------------------------\r\n\r\n    // setting bar width ------------------------------------------------------------------------------\r\n    const onLayout = (event: LayoutChangeEvent) => {\r\n        if (wasInitialized === false) {\r\n            const { width } = event.nativeEvent.layout;\r\n            setSliderWidth(width);\r\n            translateXtoValue.setValue(width - knobSize / 2);\r\n            setToValueOffset(width - knobSize / 2);\r\n            setWasInitialized(true);\r\n        }\r\n    }\r\n    // ------------------------------------------------------------------------------------------------\r\n\r\n    return (\r\n        <Animated.View style={[styles.container, { opacity, padding: styleSize === 'large' ? 7 : styleSize === 'medium' ? 14 : 21 }]}>\r\n            {\r\n                showValueLabels &&\r\n                <View style={{ width: '100%',height: 1, flexDirection }}>\r\n                    <Animated.View\r\n                        style={{ position: 'absolute', bottom: 0, left: 0, transform: [{ translateX: translateXfromValue }, { scale: fromValueScale }] }}\r\n                    >\r\n\r\n                        <Svg width={40} height={56} style={[svgOffset, { justifyContent: 'center', alignItems: 'center' }]} >\r\n                            <Path\r\n                                d=\"M20.368027196163986,55.24077513402203 C20.368027196163986,55.00364778429386 37.12897994729114,42.11537830086061 39.19501224411266,22.754628132990383 C41.26104454093417,3.393877965120147 24.647119286738516,0.571820003300814 20.368027196163986,0.7019902620266703 C16.088935105589453,0.8321519518460209 -0.40167016290734386,3.5393865664909434 0.7742997013327574,21.806127302984205 C1.950269565572857,40.07286803947746 20.368027196163986,55.4779024837502 20.368027196163986,55.24077513402203 z\"\r\n                                strokeWidth={1}\r\n                                fill={valueLabelsBackgroundColor}\r\n                                stroke={valueLabelsBackgroundColor}\r\n                            />\r\n                        </Svg>\r\n                        <TextInput editable={false} style={{ position: 'absolute', width: 40, textAlign: 'center', ...svgOffset, color: valueLabelsTextColor, bottom: 25, fontWeight: 'bold' }} ref={fromValueTextRef} />\r\n                    </Animated.View>\r\n                    <Animated.View\r\n                        style={{ position: 'absolute', bottom: 0, left: 0, alignItems: 'center', transform: [{ translateX: translateXtoValue }, { scale: toValueScale }] }}\r\n                    >\r\n                        <Svg width={40} height={56} style={[svgOffset, { justifyContent: 'center', alignItems: 'center' }]} >\r\n                            <Path\r\n                                d=\"M20.368027196163986,55.24077513402203 C20.368027196163986,55.00364778429386 37.12897994729114,42.11537830086061 39.19501224411266,22.754628132990383 C41.26104454093417,3.393877965120147 24.647119286738516,0.571820003300814 20.368027196163986,0.7019902620266703 C16.088935105589453,0.8321519518460209 -0.40167016290734386,3.5393865664909434 0.7742997013327574,21.806127302984205 C1.950269565572857,40.07286803947746 20.368027196163986,55.4779024837502 20.368027196163986,55.24077513402203 z\"\r\n                                strokeWidth={1}\r\n                                fill={valueLabelsBackgroundColor}\r\n                                stroke={valueLabelsBackgroundColor}\r\n                            />\r\n                        </Svg>\r\n                        <TextInput editable={false} style={{ position: 'absolute', width: 40, textAlign: 'center', ...svgOffset, color: valueLabelsTextColor, bottom: 25, fontWeight: 'bold' }} ref={toValueTextRef} />\r\n                    </Animated.View>\r\n                </View>\r\n            }\r\n            <View style={{ width: '100%', height: knobSize, marginVertical: 4, position: 'relative', flexDirection, alignItems: 'center' }}>\r\n                <View style={{ position: 'absolute', backgroundColor: inRangeBarColor, left: knobSize / 4, marginLeft: -knobSize / 4, right: knobSize / 4, height: knobSize / 3 }} onLayout={onLayout} />\r\n                <Animated.View style={{ position: 'absolute', left: knobSize / 4, marginLeft: -knobSize / 4, right: knobSize / 4, height: knobSize / 3, backgroundColor: outOfRangeBarColor, transform: [{ translateX: sliderWidth / 2 }, { scaleX: rightBarScaleX }, { translateX: -sliderWidth / 2 }] }} />\r\n                <Animated.View style={{ position: 'absolute', left: -knobSize / 4, width: knobSize / 2, height: knobSize / 3, borderRadius: knobSize / 3, backgroundColor: outOfRangeBarColor }} />\r\n                <Animated.View style={{ width: sliderWidth, height: knobSize / 3, backgroundColor: outOfRangeBarColor, transform: [{ translateX: -sliderWidth / 2 }, { scaleX: leftBarScaleX }, { translateX: sliderWidth / 2 }] }} />\r\n                <Animated.View style={{ position: 'absolute', left: sliderWidth - knobSize / 4, width: knobSize / 2, height: knobSize / 3, borderRadius: knobSize / 3, backgroundColor: outOfRangeBarColor }} />\r\n                <PanGestureHandler onGestureEvent={onGestureEventFromValue} onHandlerStateChange={onHandlerStateChangeFromValue}>\r\n                    <Animated.View style={[styles.knob, { height: knobSize, width: knobSize, borderRadius: knobSize, backgroundColor: fromKnobColor, elevation: fromElevation, transform: [{ translateX: translateXfromValue }] }]} />\r\n                </PanGestureHandler>\r\n                <PanGestureHandler onGestureEvent={onGestureEventToValue} onHandlerStateChange={onHandlerStateChangeToValue}>\r\n                    <Animated.View style={[styles.knob, { height: knobSize, width: knobSize, borderRadius: knobSize, backgroundColor: toKnobColor, elevation: toElevation, transform: [{ translateX: translateXtoValue }] }]} />\r\n                </PanGestureHandler>\r\n            </View>\r\n            {\r\n                showRangeLabels &&\r\n                <View style={{ width: '100%', flexDirection, justifyContent: 'space-between' }}>\r\n                    <Text style={{ color: rangeLabelsTextColor, fontWeight: \"bold\", fontSize }}>{min}</Text>\r\n                    <Text style={{ color: rangeLabelsTextColor, fontWeight: \"bold\", fontSize }}>{max}</Text>\r\n                </View>\r\n            }\r\n        </Animated.View>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        height: 100,\r\n        width: '100%'\r\n    },\r\n    knob: {\r\n        position: 'absolute',\r\n        elevation: 4\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}