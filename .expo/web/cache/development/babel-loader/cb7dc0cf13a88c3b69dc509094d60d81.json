{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\dani1\\\\Desktop\\\\apptivate\\\\src\\\\components\\\\Administrator\\\\ManageUserData.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Picker from \"../Simple/Picker\";\n\nvar _require = require(\"react-native-expo-viewport-units\"),\n    vmin = _require.vmin,\n    vh = _require.vh;\n\nimport firebase from \"../../../database/firebase\";\nimport { connect } from \"react-redux\";\nimport { actionsUser } from \"../../redux/actions/actionsUser\";\nimport ChargeScreen from \"../Simple/ChargeScreen\";\n\nfunction ManageUserData(props) {\n  var _this = this;\n\n  var _props$navigation$sta = props.navigation.state.params,\n      UserProps = _props$navigation$sta.UserProps,\n      getUsers = _props$navigation$sta.getUsers;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedValue = _useState2[0],\n      setSelectedValue = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      physioList = _useState4[0],\n      setPhysioList = _useState4[1];\n\n  var _React$useState = React.useState(true),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loading = _React$useState2[0],\n      setLoading = _React$useState2[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tokens = _useState6[0],\n      setTokens = _useState6[1];\n\n  var roleValues = {\n    \"Usuario público\": \"\",\n    Paciente: \"paciente\",\n    Fisioterapeuta: \"physiotherapist\",\n    Administrador: \"administrator\",\n    Acompañante: \"companion\"\n  };\n\n  var objectFlip = function objectFlip(obj) {\n    return Object.entries(obj).reduce(function (ret, entry) {\n      var _entry = _slicedToArray(entry, 2),\n          key = _entry[0],\n          value = _entry[1];\n\n      ret[value] = key;\n      return ret;\n    }, {});\n  };\n\n  var reversedRoleValues = objectFlip(roleValues);\n\n  var getPhysioList = function getPhysioList() {\n    var temp;\n    return _regeneratorRuntime.async(function getPhysioList$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            temp = [];\n            temp.push(\"Seleccionar\");\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(firebase.db.collection(\"users\").where(\"role\", \"==\", \"physiotherapist\").get().then(function (querySnapshot) {\n              querySnapshot.forEach(function (doc) {\n                temp.push(doc.data().personal.email);\n              });\n              setPhysioList(_objectSpread(_objectSpread({}, physioList), {}, {\n                values: temp\n              }));\n              return temp;\n            }).catch(function (error) {\n              console.log(\"Error getting doments: \", error);\n            }));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var getReceiverTokens = function getReceiverTokens() {\n    var temp;\n    return _regeneratorRuntime.async(function getReceiverTokens$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.warn(\"user props\", UserProps.personal.email, \"    \", UserProps.companionEmail, \"    \", UserProps.physioEmail);\n            temp = [];\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(firebase.db.collection(\"users\").where(\"personal.email\", \"in\", [UserProps.companionEmail, UserProps.physioEmail, UserProps.personal.email]).get().then(function (querySnapshot) {\n              querySnapshot.forEach(function (doc) {\n                console.log(\"doc data----\", doc.data().token);\n                temp.push(doc.data().token);\n                sendPushNotification(doc.data().token);\n              });\n              setTokens(_objectSpread(_objectSpread({}, tokens), {}, {\n                values: temp\n              }));\n            }).catch(function (error) {\n              console.log(\"Error getting documents: \", error);\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  function sendPushNotification(expoPushToken) {\n    var message;\n    return _regeneratorRuntime.async(function sendPushNotification$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            message = {\n              to: expoPushToken,\n              sound: \"default\",\n              title: \"Apertura de Seguimiento \" + UserProps.personal.name,\n              body: \"Se ha activado el seguimiento del paciente\",\n              data: {\n                someData: \"goes here\"\n              }\n            };\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(fetch(\"https://exp.host/--/api/v2/push/send\", {\n              method: \"POST\",\n              headers: {\n                Accept: \"application/json\",\n                \"Accept-encoding\": \"gzip, deflate\",\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify(message)\n            }));\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    if (UserProps.role == \"paciente\") {\n      setSelectedValue(_objectSpread(_objectSpread({}, UserProps), {}, {\n        roleValue: reversedRoleValues[UserProps.role],\n        physioValue: UserProps.physioEmail\n      }));\n      getPhysioList().then(function (result) {\n        setLoading(false);\n      });\n    } else {\n      setSelectedValue(_objectSpread(_objectSpread({}, UserProps), {}, {\n        roleValue: reversedRoleValues[UserProps.role]\n      }));\n      setLoading(false);\n    }\n  }, []);\n\n  var updateConfig = function updateConfig() {\n    return _regeneratorRuntime.async(function updateConfig$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            console.log(\"SE ACTUALIZARA EL ROL DEL USUARIO \", selectedValue.uid, selectedValue.roleValue, roleValues[selectedValue.roleValue]);\n\n            if (!(selectedValue.roleValue == \"Paciente\")) {\n              _context4.next = 6;\n              break;\n            }\n\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(firebase.db.collection(\"users\").doc(selectedValue.uid).update({\n              role: roleValues[selectedValue.roleValue],\n              physioEmail: selectedValue.physioValue\n            }));\n\n          case 4:\n            _context4.next = 8;\n            break;\n\n          case 6:\n            _context4.next = 8;\n            return _regeneratorRuntime.awrap(firebase.db.collection(\"users\").doc(selectedValue.uid).update({\n              role: roleValues[selectedValue.roleValue]\n            }));\n\n          case 8:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var repetitionSelector = function repetitionSelector() {\n    return React.createElement(View, {\n      style: styles.repetitionInputContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 7\n      }\n    }, React.createElement(Picker, {\n      width: \"100%\",\n      height: 40,\n      placeholder: \"Seleccionar\",\n      setData: function setData(itemValue, itemIndex) {\n        console.warn(\"in set data---\", itemValue);\n        setSelectedValue(_objectSpread(_objectSpread({}, selectedValue), {}, {\n          roleValue: itemValue\n        }));\n      },\n      initialValue: selectedValue.roleValue,\n      list: [\"Usuario público\", \"Paciente\", \"Fisioterapeuta\", \"Administrador\", \"Acompañante\"],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  var physioSelector = function physioSelector() {\n    var temp = physioList.values;\n\n    if (temp == undefined) {\n      getPhysioList();\n    } else {\n      return React.createElement(View, {\n        style: styles.repetitionInputContainer,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 9\n        }\n      }, React.createElement(Picker, {\n        width: \"100%\",\n        height: 40,\n        placeholder: \"Seleccionar\",\n        setData: function setData(itemValue, itemIndex) {\n          console.warn(\"in set data---\", itemValue);\n          setSelectedValue(_objectSpread(_objectSpread({}, selectedValue), {}, {\n            physioValue: itemValue\n          }));\n        },\n        initialValue: selectedValue.physioValue,\n        list: temp,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }\n      }));\n    }\n  };\n\n  if (loading) {\n    return React.createElement(View, {\n      style: {\n        backgroundColor: \"#ffffff\",\n        justifyContent: \"center\",\n        height: \"100%\",\n        width: \"100%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 7\n      }\n    }, React.createElement(ChargeScreen, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 7\n      }\n    }, React.createElement(View, {\n      style: styles.configurationContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }\n    }, React.createElement(View, {\n      style: {\n        height: \"10%\",\n        marginTop: \"4%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      style: {\n        fontWeight: \"bold\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }\n    }, \"Usuario: \", UserProps.personal.name)), React.createElement(View, {\n      style: styles.containerInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      style: {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }\n    }, \"Rol \"), repetitionSelector(), React.createElement(View, {\n      style: styles.header2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }\n    }, React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }\n    }, \" ALERTA : No cambiar los usuarios ACOMPA\\xD1ANTE o FISIOTERAPEUTA a PACIENTE. \"))), selectedValue.roleValue == \"Paciente\" ? React.createElement(View, {\n      style: styles.containerInput2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 15\n      }\n    }, \"Fisioterapeuta Encargado \"), physioSelector()) : React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 13\n      }\n    })), React.createElement(View, {\n      style: styles.containerButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }\n    }, React.createElement(TouchableOpacity, {\n      style: styles.button,\n      onPress: function onPress() {\n        setLoading(true);\n        updateConfig().then(function _callee() {\n          var token;\n          return _regeneratorRuntime.async(function _callee$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  console.log(\"update config then\");\n\n                  if (!(selectedValue.roleValue == \"Paciente\")) {\n                    _context5.next = 5;\n                    break;\n                  }\n\n                  _context5.next = 4;\n                  return _regeneratorRuntime.awrap(getReceiverTokens());\n\n                case 4:\n                  token = _context5.sent;\n\n                case 5:\n                  getUsers();\n                  props.navigation.navigate(\"Home\");\n                  setLoading(false);\n\n                case 8:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, null, null, null, Promise);\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: \"white\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 13\n      }\n    }, \"Actualizar\"))));\n  }\n}\n\nvar MapStateToProps = function MapStateToProps(store) {\n  return {\n    user: store.User.user,\n    connection: store.User.connection\n  };\n};\n\nvar MapDispatchToProps = function MapDispatchToProps(dispatch, store) {\n  return {\n    setUser: function setUser(val) {\n      return dispatch(actionsUser.SET_USER(val));\n    }\n  };\n};\n\nexport default connect(MapStateToProps, MapDispatchToProps)(ManageUserData);\nvar styles = StyleSheet.create({\n  header: {\n    height: \"25%\",\n    width: \"80%\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    borderBottomColor: \"#151522\",\n    borderBottomWidth: 1,\n    marginLeft: \"10%\",\n    marginRight: \"10%\"\n  },\n  textHeader: {\n    fontSize: vmin(5)\n  },\n  header2: {\n    height: \"40%\",\n    width: \"90%\",\n    padding: 15,\n    justifyContent: \"center\",\n    marginLeft: \"5%\",\n    marginRight: \"5%\",\n    alignItems: \"center\",\n    backgroundColor: \"#fff300\"\n  },\n  container: {\n    backgroundColor: \"white\",\n    width: \"100%\",\n    height: \"100%\"\n  },\n  configurationContainer: {\n    width: \"100%\",\n    height: \"80%\",\n    alignItems: \"center\"\n  },\n  containerPercentajes: {\n    width: \"100%\",\n    height: \"20%\",\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\"\n  },\n  containerInput: {\n    height: \"30%\",\n    width: \"90%\",\n    marginLeft: \"5%\",\n    marginRight: \"5%\",\n    marginBottom: \"10%\",\n    justifyContent: \"space-evenly\"\n  },\n  containerInput2: {\n    height: \"20%\",\n    width: \"90%\",\n    marginLeft: \"5%\",\n    marginRight: \"5%\",\n    marginBottom: \"10%\",\n    justifyContent: \"flex-start\"\n  },\n  timeContainer: {\n    borderColor: \"rgba(228, 228, 228, 0.6)\",\n    borderRadius: 5,\n    height: \"100%\",\n    width: \"45%\"\n  },\n  textInput: {\n    width: \"100%\",\n    textAlign: \"center\"\n  },\n  containerButton: {\n    height: \"20%\",\n    width: \"100%\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    padding: vmin(2)\n  },\n  button: {\n    backgroundColor: \"#6979F8\",\n    margin: vmin(2),\n    width: \"80%\",\n    borderRadius: 10,\n    height: \"50%\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  repetitionInputContainer: {\n    height: \"30%\",\n    width: \"100%\",\n    borderColor: \"rgba(228, 228, 228, 0.6)\",\n    borderRadius: 5\n  },\n  timeInputContainer: {\n    height: \"50%\",\n    width: \"100%\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\"\n  }\n});","map":{"version":3,"sources":["C:/Users/dani1/Desktop/apptivate/src/components/Administrator/ManageUserData.tsx"],"names":["React","useState","useEffect","Picker","require","vmin","vh","firebase","connect","actionsUser","ChargeScreen","ManageUserData","props","navigation","state","params","UserProps","getUsers","selectedValue","setSelectedValue","physioList","setPhysioList","loading","setLoading","tokens","setTokens","roleValues","Paciente","Fisioterapeuta","Administrador","Acompañante","objectFlip","obj","Object","entries","reduce","ret","entry","key","value","reversedRoleValues","getPhysioList","temp","push","db","collection","where","get","then","querySnapshot","forEach","doc","data","personal","email","values","catch","error","console","log","getReceiverTokens","warn","companionEmail","physioEmail","token","sendPushNotification","expoPushToken","message","to","sound","title","name","body","someData","fetch","method","headers","Accept","JSON","stringify","role","roleValue","physioValue","result","updateConfig","uid","update","repetitionSelector","styles","repetitionInputContainer","itemValue","itemIndex","physioSelector","undefined","backgroundColor","justifyContent","height","width","container","configurationContainer","marginTop","fontWeight","containerInput","header2","containerInput2","containerButton","button","navigate","color","MapStateToProps","store","user","User","connection","MapDispatchToProps","dispatch","setUser","val","SET_USER","StyleSheet","create","header","alignItems","borderBottomColor","borderBottomWidth","marginLeft","marginRight","textHeader","fontSize","padding","containerPercentajes","flexDirection","marginBottom","timeContainer","borderColor","borderRadius","textInput","textAlign","margin","timeInputContainer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  Alert,\r\n  TouchableOpacity,\r\n  ActivityIndicator,\r\n} from \"react-native\";\r\nimport Picker from \"../Simple/Picker\";\r\nvar { vmin, vh } = require(\"react-native-expo-viewport-units\");\r\nimport firebase from \"../../../database/firebase\";\r\n\r\n// redux\r\nimport { Dispatch } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport * as MyTypes from \"../../redux/types/types\";\r\nimport { actionsUser } from \"../../redux/actions/actionsUser\";\r\nimport ChargeScreen from \"../Simple/ChargeScreen\";\r\n\r\nfunction ManageUserData(props) {\r\n  const { UserProps, getUsers } = props.navigation.state.params;\r\n\r\n  const [selectedValue, setSelectedValue] = useState({});\r\n  const [physioList, setPhysioList] = useState({});\r\n  const [loading, setLoading] = React.useState(true);\r\n  const [tokens, setTokens] = useState({});\r\n\r\n  //console.log(\"estado de role :\", selectedValue.roleValue);\r\n  const roleValues = {\r\n    \"Usuario público\": \"\",\r\n    Paciente: \"paciente\",\r\n    Fisioterapeuta: \"physiotherapist\",\r\n    Administrador: \"administrator\",\r\n    Acompañante: \"companion\",\r\n  };\r\n\r\n  const objectFlip = (obj) => {\r\n    return Object.entries(obj).reduce((ret, entry: any) => {\r\n      const [key, value] = entry;\r\n      ret[value] = key;\r\n      return ret;\r\n    }, {});\r\n  };\r\n\r\n  const reversedRoleValues = objectFlip(roleValues);\r\n\r\n  const getPhysioList = async () => {\r\n    // console.log(\"getting list of physio\")\r\n    let temp: any = [];\r\n    temp.push(\"Seleccionar\");\r\n    await firebase.db\r\n      .collection(\"users\")\r\n      .where(\"role\", \"==\", \"physiotherapist\")\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        querySnapshot.forEach((doc) => {\r\n          // console.log(\"data---\",doc.data().personal.email)\r\n          temp.push(doc.data().personal.email);\r\n          //console.log(\"insnapshot\",temp)\r\n        });\r\n        setPhysioList({ ...physioList, values: temp });\r\n        // console.log(\"in get list after setting\",temp)\r\n        return temp;\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error getting doments: \", error);\r\n      });\r\n  };\r\n\r\n  const getReceiverTokens = async () => {\r\n    console.warn(\r\n      \"user props\",\r\n      UserProps.personal.email,\r\n      \"    \",\r\n      UserProps.companionEmail,\r\n      \"    \",\r\n      UserProps.physioEmail\r\n    );\r\n    let temp: any = [];\r\n    await firebase.db\r\n      .collection(\"users\")\r\n      .where(\"personal.email\", \"in\", [\r\n        UserProps.companionEmail,\r\n        UserProps.physioEmail,\r\n        UserProps.personal.email,\r\n      ])\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        querySnapshot.forEach((doc) => {\r\n          console.log(\"doc data----\", doc.data().token);\r\n          temp.push(doc.data().token);\r\n          sendPushNotification(doc.data().token);\r\n        });\r\n        setTokens({ ...tokens, values: temp });\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"Error getting documents: \", error);\r\n      });\r\n  };\r\n\r\n  async function sendPushNotification(expoPushToken) {\r\n    const message = {\r\n      to: expoPushToken,\r\n      sound: \"default\",\r\n      title: \"Apertura de Seguimiento \" + UserProps.personal.name,\r\n      body: \"Se ha activado el seguimiento del paciente\",\r\n      data: { someData: \"goes here\" },\r\n    };\r\n\r\n    await fetch(\"https://exp.host/--/api/v2/push/send\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Accept-encoding\": \"gzip, deflate\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(message),\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    //console.log(\"use effect\")\r\n\r\n    if (UserProps.role == \"paciente\") {\r\n      setSelectedValue({\r\n        ...UserProps,\r\n        roleValue: reversedRoleValues[UserProps.role],\r\n        physioValue: UserProps.physioEmail,\r\n      });\r\n      getPhysioList().then(function (result) {\r\n        //getReceiverTokens();\r\n        setLoading(false);\r\n      });\r\n    } else {\r\n      setSelectedValue({\r\n        ...UserProps,\r\n        roleValue: reversedRoleValues[UserProps.role],\r\n      });\r\n      setLoading(false);\r\n    }\r\n    // if(selectedValue.roleValue != \"Paciente\") {\r\n    //   setSelectedValue({\r\n    //     ...UserProps,\r\n    //     roleValue: reversedRoleValues[UserProps.role],\r\n    //   });setLoading(false)\r\n    //   //if(selectedValue.roleValue!=\"Paciente\"){ console.log(\"in if not pacient\"); setLoading(false)};\r\n    // }\r\n    // if (UserProps.role == \"paciente\"|| selectedValue.roleValue == \"Paciente\") {\r\n    //   console.log(\"use effect of role paciente\")\r\n    //   let physio = \"\"\r\n    //   UserProps.physioEmail == \"\" ? physio = \"Seleccionar\" : physio = UserProps.physioEmail\r\n    //   setSelectedValue({\r\n    //     ...UserProps,\r\n    //     roleValue: reversedRoleValues[UserProps.role],\r\n    //     physioValue: physio,\r\n    //   });\r\n    //   getPhysioList().then(function (result) {\r\n    //     console.log(\"temp---\", result)\r\n    //     setLoading(false);\r\n    //   });\r\n    // }\r\n  }, []);\r\n\r\n  const updateConfig = async () => {\r\n    console.log(\r\n      \"SE ACTUALIZARA EL ROL DEL USUARIO \",\r\n      selectedValue.uid,\r\n      selectedValue.roleValue,\r\n      roleValues[selectedValue.roleValue]\r\n    );\r\n    if (selectedValue.roleValue == \"Paciente\") {\r\n      await firebase.db.collection(\"users\").doc(selectedValue.uid).update({\r\n        role: roleValues[selectedValue.roleValue],\r\n        physioEmail: selectedValue.physioValue,\r\n      });\r\n    } else {\r\n      await firebase.db.collection(\"users\").doc(selectedValue.uid).update({\r\n        role: roleValues[selectedValue.roleValue],\r\n      });\r\n    }\r\n  };\r\n\r\n  const repetitionSelector = () => {\r\n    return (\r\n      <View style={styles.repetitionInputContainer}>\r\n        <Picker\r\n          width={\"100%\"}\r\n          height={40}\r\n          placeholder={\"Seleccionar\"}\r\n          setData={(itemValue, itemIndex) => {\r\n            console.warn(\"in set data---\", itemValue);\r\n            setSelectedValue({ ...selectedValue, roleValue: itemValue });\r\n          }}\r\n          initialValue={selectedValue.roleValue}\r\n          list={[\r\n            \"Usuario público\",\r\n            \"Paciente\",\r\n            \"Fisioterapeuta\",\r\n            \"Administrador\",\r\n            \"Acompañante\",\r\n          ]}\r\n        />\r\n      </View>\r\n    );\r\n  };\r\n\r\n  const physioSelector = () => {\r\n    const temp = physioList.values;\r\n    if (temp == undefined) {\r\n      getPhysioList();\r\n    } else {\r\n      //console.log(\"sleector-----\", physioList.values);\r\n      return (\r\n        <View style={styles.repetitionInputContainer}>\r\n          <Picker\r\n            width={\"100%\"}\r\n            height={40}\r\n            placeholder={\"Seleccionar\"}\r\n            setData={(itemValue, itemIndex) => {\r\n              console.warn(\"in set data---\", itemValue);\r\n              setSelectedValue({ ...selectedValue, physioValue: itemValue });\r\n            }}\r\n            initialValue={selectedValue.physioValue}\r\n            list={temp}\r\n          />\r\n        </View>\r\n      );\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <View\r\n        style={{\r\n          backgroundColor: \"#ffffff\",\r\n          justifyContent: \"center\",\r\n          height: \"100%\",\r\n          width: \"100%\",\r\n        }}\r\n      >\r\n        <ChargeScreen />\r\n      </View>\r\n    );\r\n  } else {\r\n    return (\r\n      <View style={styles.container}>\r\n        <View style={styles.configurationContainer}>\r\n          <View style={{ height:\"10%\", marginTop: \"4%\" }}>\r\n            <Text style= {{fontWeight: \"bold\"}}>Usuario: {UserProps.personal.name}</Text>\r\n          </View>\r\n\r\n          <View style={styles.containerInput}>\r\n            <Text style={{}}>Rol </Text>\r\n            {repetitionSelector()}\r\n        <View style={styles.header2}>\r\n          <Text> ALERTA : No cambiar los usuarios ACOMPAÑANTE o FISIOTERAPEUTA a PACIENTE. </Text>\r\n        </View>\r\n          </View>\r\n          {selectedValue.roleValue == \"Paciente\" ? (\r\n            <View style={styles.containerInput2}>\r\n              <Text style={{}}>Fisioterapeuta Encargado </Text>\r\n              {physioSelector()}\r\n            </View>\r\n          ) : (\r\n            <View></View>\r\n          )}\r\n        </View>\r\n\r\n        <View style={styles.containerButton}>\r\n          <TouchableOpacity\r\n            style={styles.button}\r\n            onPress={() => {\r\n              setLoading(true);\r\n              updateConfig().then(async function () {\r\n                console.log(\"update config then\");\r\n                if (selectedValue.roleValue == \"Paciente\") {\r\n                  const token = await getReceiverTokens();\r\n                  //tokens.then(function () {\r\n                  // console.log(\"reciever then\", tokens);\r\n                  // if (tokens.values !== undefined) {\r\n                  //   console.log(\"get tokens if--\", tokens.values);\r\n                  //   tokens.values.forEach((element) => {\r\n                  //     sendPushNotification(element);\r\n                  //   });\r\n                  // }\r\n                  //});\r\n                }\r\n                getUsers();\r\n                props.navigation.navigate(\"Home\");\r\n                setLoading(false);\r\n              });\r\n            }}\r\n          >\r\n            <Text style={{ color: \"white\" }}>Actualizar</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst MapStateToProps = (store: MyTypes.ReducerState) => {\r\n  return {\r\n    user: store.User.user,\r\n    connection: store.User.connection,\r\n  };\r\n};\r\n\r\nconst MapDispatchToProps = (dispatch: Dispatch, store: any) => ({\r\n  setUser: (val) => dispatch(actionsUser.SET_USER(val)),\r\n});\r\nexport default connect(MapStateToProps, MapDispatchToProps)(ManageUserData);\r\n\r\nconst styles = StyleSheet.create({\r\n  header: {\r\n    height: \"25%\",\r\n    width: \"80%\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    borderBottomColor: \"#151522\",\r\n    borderBottomWidth: 1,\r\n    marginLeft: \"10%\",\r\n    marginRight: \"10%\",\r\n  },\r\n  textHeader: {\r\n    fontSize: vmin(5),\r\n  },\r\n  header2: {\r\n    height: \"40%\",\r\n    width: \"90%\",\r\n    padding: 15,\r\n    justifyContent: \"center\",\r\n    marginLeft: \"5%\",\r\n    marginRight: \"5%\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#fff300\",\r\n  },\r\n  container: {\r\n    backgroundColor: \"white\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n\r\n  configurationContainer: {\r\n    // backgroundColor: \"peru\",\r\n    width: \"100%\",\r\n    height: \"80%\",\r\n    alignItems: \"center\",\r\n\r\n    // justifyContent: \"center\",\r\n  },\r\n  containerPercentajes: {\r\n    width: \"100%\",\r\n    height: \"20%\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-evenly\",\r\n    alignItems: \"center\",\r\n    // backgroundColor: \"peru\",\r\n  },\r\n\r\n  containerInput: {\r\n    height: \"30%\",\r\n    width: \"90%\",\r\n    marginLeft: \"5%\",\r\n    marginRight: \"5%\",\r\n    marginBottom: \"10%\",\r\n    justifyContent: \"space-evenly\",\r\n    // backgroundColor: \"tomato\",\r\n  },\r\n\r\n  containerInput2: {\r\n    height: \"20%\",\r\n    width: \"90%\",\r\n    marginLeft: \"5%\",\r\n    marginRight: \"5%\",\r\n    marginBottom: \"10%\",\r\n    justifyContent: \"flex-start\",\r\n    // backgroundColor: \"tomato\",\r\n  },\r\n\r\n  timeContainer: {\r\n    borderColor: \"rgba(228, 228, 228, 0.6)\",\r\n    //  borderWidth: 1,\r\n    borderRadius: 5,\r\n    height: \"100%\",\r\n    width: \"45%\",\r\n  },\r\n  textInput: {\r\n    width: \"100%\",\r\n    textAlign: \"center\",\r\n  },\r\n\r\n  containerButton: {\r\n    height: \"20%\",\r\n    width: \"100%\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    padding: vmin(2),\r\n    // backgroundColor: \"red\",\r\n  },\r\n  button: {\r\n    backgroundColor: \"#6979F8\",\r\n    margin: vmin(2),\r\n    width: \"80%\",\r\n    borderRadius: 10,\r\n    height: \"50%\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  repetitionInputContainer: {\r\n    height: \"30%\",\r\n    width: \"100%\",\r\n    borderColor: \"rgba(228, 228, 228, 0.6)\",\r\n    //  borderWidth: 1,\r\n    borderRadius: 5,\r\n  },\r\n\r\n  timeInputContainer: {\r\n    height: \"50%\",\r\n    width: \"100%\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}